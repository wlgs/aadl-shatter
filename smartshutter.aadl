package smartshutter
public
	
	-- WITH CLAUSES --
	with SEI;
	with Data_Model;
	with Base_Types;
	
	-- DATA TYPES -- 
	
	data ShutterState
    	properties
        	Data_Model::Enumerators => ("Closed", "Opening", "Opened", "Closing");
        	Data_Model::base_type => (classifier (Base_Types::Integer));
        	Data_Size => 30 Bytes;
    end ShutterState;
    
    data EngineState
    	properties
    		Data_Model::Enumerators => ("Up", "Down", "Stable");
        	Data_Model::base_type => (classifier (Base_Types::Unsigned_16));
        	Data_Size => 4 Bytes;
    end EngineState;
    
    data ControllerAction
    	properties
    	    Data_Model::Data_Representation => String;
        	Data_Model::base_type => (classifier (Base_Types::String));
        	Data_Size => 20 Bytes;
    end ControllerAction;
    
    
    system SmartShutterSystem
    end SmartShutterSystem;
    
    system implementation SmartShutterSystem.impl
    	subcomponents
    		remoteActionDispatcher: device remote_action_dispatcher;
    		server: device smart_server;
    		shutterEngine: device shutter_engine;
    		shutterController: device shutter_controller;
    		
    		cpu: processor CPU.impl;
    		ram: memory ram.impl;
    		eth: bus Ethernet.impl;
    		hwc: bus HWConnection.impl;
    		
    		serverController: process ServerController.impl;
    		shutterLogicController: process ShutterLogicController.impl;
    		shutterEngineController: process ShutterEngineController.impl;
    		
    	connections
    		c1: bus access remoteActionDispatcher.bus_access <-> eth;
    		c2: bus access server.bus_access <-> eth;
    		c3: bus access shutterController.bus_access <-> eth;
    		c4: port shutterController.action_dispatch -> shutterEngine.engine_action_receive;
    		c5: port shutterEngine.engine_state -> shutterController.engine_state_receive;
    		c6: bus access cpu.hwcAccess <-> hwc;
    		c7: bus access ram.hwcAccess <-> hwc;
    		c8: port server.server_action_dispatch -> shutterController.action_receive;
    		c9: port remoteActionDispatcher.server_action_dispatch -> server.server_action_receive;
    		c10: port serverController.send_remote_data -> shutterLogicController.receive_remote_data;
    		c11: port shutterEngineController.send_current_engine_state -> shutterLogicController.receive_engine_state_data;
    		c12: port shutterLogicController.send_engine_state_data -> shutterEngineController.receive_engine_state;
    		c13: port shutterLogicController.send_remote_data -> serverController.receive_remote_data;
    		c14: bus access cpu.ethernetAccess <-> eth;
    		c15: bus access server.hwc_access <-> hwc;
    		
    		
    		
    end SmartShutterSystem.impl;
    
    -- PROCESS --
    
    
    process ServerController
    	features
    		receive_remote_data: in data port ControllerAction;
    		send_remote_data: out data port ControllerAction;
    end ServerController;
    
    process implementation ServerController.impl
    	subcomponents
    		serverThread: thread ProcessRemoteDataThread.impl;
    	connections
    		c1: port receive_remote_data -> serverThread.data_in;
    		c2: port serverThread.data_out -> send_remote_data;
    end ServerController.impl;
    
    
    process ShutterLogicController
    	features
    		receive_remote_data: in data port ControllerAction;
    		receive_engine_state_data: in data port EngineState;
    		send_engine_state_data: out data port EngineState;
    		send_remote_data: out data port ControllerAction;
    end ShutterLogicController;
    
    process implementation ShutterLogicController.impl
    	subcomponents
    		logicThread: thread ShutterLogicControllerThread.impl;
    		transformThread: thread ShutterLogicTransformThread.impl;
    	connections
    		c1: port receive_remote_data -> logicThread.data_in;
    		c2: port logicThread.data_out -> transformThread.action_data_in;
    		c3: port transformThread.engine_state_out -> send_engine_state_data;
    		c4: port receive_engine_state_data -> transformThread.engine_state_in;
    end ShutterLogicController.impl;
    
    process ShutterEngineController
    	features
    		receive_engine_state: in data port EngineState;
    		send_current_engine_state: out data port EngineState;
    end ShutterEngineController;
    process implementation ShutterEngineController.impl
    	subcomponents
    		engineThread: thread ShutterEngineControllerThread.impl;
    	connections
    		c1: port receive_engine_state -> engineThread.data_in;
    		c2: port engineThread.data_out -> send_current_engine_state;
    end ShutterEngineController.impl;
    
    
    
    
    -- THREADS --
   
    thread ProcessRemoteDataThread
    	features
    		data_in: in data port ControllerAction;
    		data_out: out data port ControllerAction;
    				properties
			SEI::MIPSBudget => 15.0 mips;
    end ProcessRemoteDataThread;
    thread implementation ProcessRemoteDataThread.impl
    end ProcessRemoteDataThread.impl;
    
    
    thread ShutterLogicControllerThread
    	features
    		data_in: in data port ControllerAction;
    		data_out: out data port ControllerAction;
    				properties
			SEI::MIPSBudget => 15.0 mips;
    end ShutterLogicControllerThread;
    thread implementation ShutterLogicControllerThread.impl
    end ShutterLogicControllerThread.impl;
    
    thread ShutterLogicTransformThread
    	features
    		action_data_in: in data port ControllerAction;
    		engine_state_out: out data port EngineState;
    		
    		action_data_out: out data port ControllerAction;
    		engine_state_in: in data port EngineState;
    	properties
			SEI::MIPSBudget => 15.0 mips;
    end ShutterLogicTransformThread;
    thread implementation ShutterLogicTransformThread.impl
    end ShutterLogicTransformThread.impl;
    
    
    thread ShutterEngineControllerThread
    	features
    		data_in: in data port EngineState;
    		data_out: out data port EngineState;
    	properties
			SEI::MIPSBudget => 10.0 mips;
    end ShutterEngineControllerThread;
    thread implementation ShutterEngineControllerThread.impl
    end ShutterEngineControllerThread.impl;

    
    
    
    bus Ethernet
		properties
			SEI::GrossWeight => 0.075kg;
			SEI::BandWidthCapacity => 100.0 Mbps;
	end Ethernet;

	bus implementation Ethernet.impl
	end Ethernet.impl;
	
	bus HWConnection
	properties
			SEI::GrossWeight => 0.075kg;
			SEI::BandWidthCapacity => 1000.0 Mbps;
	end HWConnection;

	bus implementation HWConnection.impl
	end HWConnection.impl;

	memory RAM
		features
			hwcAccess: requires bus access HWConnection;
		properties
			SEI::GrossWeight => 0.025kg;
	end RAM;

	memory implementation RAM.impl
	end RAM.impl;
	
	device remote_action_dispatcher
		features
			server_action_dispatch: out data port ControllerAction;
			bus_access: requires bus access Ethernet;
	end remote_action_dispatcher;
	
	device implementation remote_action_dispatcher.impl
	end remote_action_dispatcher.impl;
	
	device smart_server
		features
			server_action_dispatch: out data port ControllerAction;
			server_action_receive: in data port ControllerAction;
	        bus_access: requires bus access Ethernet;
	        hwc_access: requires bus access HWConnection;
	   properties
			SEI::GrossWeight => 1.0 kg;
			Period => 500ms;
			Dispatch_Protocol => Hybrid;
	end smart_server;
	
	device implementation smart_server.impl
	end smart_server.impl;
	
	device shutter_engine
		features
			engine_action_receive: in data port EngineState;
	        engine_state: out data port EngineState;
	   	properties
			SEI::GrossWeight => 1.5kg;
			Period => 25ms;
			Dispatch_Protocol => Sporadic;
	end shutter_engine;
	
	device implementation shutter_engine.impl
	end shutter_engine.impl;
	
	
	device shutter_controller
		features
	        action_dispatch: out data port EngineState;
	        action_receive: in data port ControllerAction;
	        engine_state_receive: in data port EngineState;
	        bus_access: requires bus access Ethernet;
	   	properties
			SEI::GrossWeight => 0.5kg;
			Period => 100ms;
			Dispatch_Protocol => Sporadic;
	end shutter_controller;
	
	device implementation shutter_controller.impl
	end shutter_controller.impl;
	
	-- PROCESSOR --
	
	processor CPU
	  features
	    ethernetAccess: requires bus access ethernet;
	    hwcAccess: requires bus access HWConnection;
	  properties
			SEI::MIPSCapacity => 144.4 mips;
			SEI::GrossWeight => 0.05kg;
	end CPU;

	processor implementation CPU.impl
	end CPU.impl;
	
    
    
    
end smartshutter;